{
    "Python project template (incomplete)": {
        "prefix": "s-init",
        "body": [
            "# Basic structure of the Python project",
            "",
            "",
            "* `dev/`",
            "",
            "* `tests/`",
            "",
            "    * `conftest.py`",
            "",
            "    * `test_{{whatever}}.py`",
            "",
            "* `{{whatever}}.py`",
            "",
            "* `.gitignore`",
            "",
            "    ```bash",
            "    cat << EOF > .gitignore",
            "    # To be ignored by VCS",
            "",
            "",
            "    __pycache__/",
            "    *.egg-info/",
            "    EOF",
            "    ```",
            "",
            "* `.pylintrc`",
            "",
            "* `Makefile`",
            "",
            "    ```bash",
            "    cat << EOF > Makefile",
            "    #",
            "",
            "    SHELL := /bin/bash",
            "",
            "    .ONESHELL:",
            "",
            "    env:",
            "        python -m venv env",
            "        source env/bin/activate",
            "        pip install --upgrade pip",
            "        pip install wheel",
            "        pip install --requirement requirements-dev.txt",
            "        pip install --requirement requirements.txt",
            "        pip install --editable .",
            "",
            "    test: env",
            "        source env/bin/activate",
            "        pytest .",
            "",
            "    lint: env",
            "        source env/bin/activate",
            "        pylint {{whatever}}.py",
            "",
            "    build:",
            "        :",
            "",
            "    clean:",
            "        :",
            "    EOF",
            "    ```",
            "",
            "* `pytest.ini`",
            "",
            "    ```bash",
            "    cat << EOF > pytest.ini",
            "    ;",
            "",
            "",
            "    [pytest]",
            "    addopts = --verbose",
            "    EOF",
            "    ```",
            "",
            "* `README.md`",
            "",
            "* `requirements.txt`",
            "",
            "    ```bash",
            "    cat << EOF > requirements.txt",
            "    #",
            "",
            "",
            "    # pandas==0.25.3",
            "    EOF",
            "    ```",
            "",
            "* requirements-dev.txt",
            "",
            "    ```bash",
            "    cat << EOF > requirements-dev.txt",
            "    #",
            "",
            "",
            "    # ipython",
            "    EOF",
            "    ```",
            "",
            "* `setup.py`"
        ],
        "description": ""
    },
    "Docker notes/cheatsheet": {
        "prefix": "s-docker",
        "body": [
            "# Docker sandbox",
            "",
            "Docker is ... OS-level virtualization to deliver software in packages called containers.",
            "",
            "Containers are isolated from one another and bundle their own software, libraries and configuration files; ....",
            "",
            "Because all of the containers share the services of a single operating system kernel, they use fewer resources than virtual machines.",
            "",
            "## Images",
            "",
            "```bash",
            "docker image ...",
            "```",
            "",
            "### To list",
            "",
            "```bash",
            "d image ls \\",
            "    [--all]",
            "```",
            "",
            "### To create - pull or build",
            "",
            "```bash",
            "d [image] pull NAME[:TAG]",
            "```",
            "",
            "Docker builds images automatically by reading the instructions from a `Dockerfile` - a text file that contains all commands, in order, needed to build a given image.",
            "",
            "```bash",
            "d [image] build PATH TO DOCKERFILE \\",
            "    --tag name:tag",
            "```",
            "",
            "### To remove, prune",
            "",
            "```bash",
            "d image rm NAME:TAG | IMAGE ID",
            "```",
            "",
            "```bash",
            "d image prune [--all] [--force]",
            "```",
            "",
            "## Containers",
            "",
            "### To list",
            "",
            "```bash",
            "d",
            "    container ls | ps \\",
            "    [--all]",
            "```",
            "",
            "### To create a.k.a. run",
            "",
            "```bash",
            "d [container] run \\",
            "    [--interactive --tty] \\",
            "    [--detach] \\",
            "    [--network host] \\",
            "    IMAGE[:TAG] | IMAGE ID [COMMAND NOT QUOTED]",
            "```",
            "",
            "### To stop",
            "",
            "```bash",
            "d [container] stop CONTAINER ID | NAME",
            "```",
            "",
            "### To remove, prune",
            "",
            "```bash",
            "d [container] rm CONTAINER ID | NAME",
            "```",
            "",
            "```bash",
            "d container prune [--force]",
            "```",
            "",
            "### To fetch logs",
            "",
            "```bash",
            "d [container] logs CONTAINER ID | NAME [--follow]",
            "```",
            "",
            "### To run \"a command in a RUNNING container\"",
            "",
            "```bash",
            "d [container] exec CONTAINER ID | NAME \\",
            "    [--interactive --tty]",
            "    [--detach]",
            "    COMMAND NOT QUOTED",
            "```",
            "",
            "### To export container's filesystem",
            "",
            "```bash",
            "d [container] export CONTAINER ID | NAME",
            "    [--output FILE]",
            "```",
            "",
            "## Volumes",
            "",
            "",
            "",
            "## Networks",
            "",
            "### To list",
            "",
            "```bash",
            "d network ls",
            "```",
            "",
            "### To create",
            "",
            "```bash",
            "d network create NETWORK NAME | ID \\",
            "    [--attachable]",
            "```",
            "",
            "### To remove, prune",
            "",
            "```bash",
            "d network rm NETWORK NAME | ID",
            "```",
            "",
            "```bash",
            "d network prune [--force]",
            "```",
            "",
            "TO BE CONTINUED..."
        ],
        "description": ""
    },
    "Kinesis basics": {
        "prefix": "s-kinesis",
        "body": [
            "# Kinesis",
            "",
            "## Data Streams",
            "",
            "Concepts: record, stream, shard, producer, consumer",
            "",
            "```bash",
            "npm install kinesis-console-consumer",
            "```",
            "",
            "```bash",
            "export AWS_REGION=\"us-west-2\" && \\",
            "    node_modules/.bin/kinesis-console-consumer --list",
            "",
            "export AWS_REGION=\"us-west-2\" && \\",
            "    node_modules/.bin/kinesis-console-consumer --type-oldest STREAM NAME",
            "```",
            "",
            "```bash",
            "aws kinesis list-streams",
            "",
            "aws kinesis describe-stream-summary --stream-name \\",
            "    STREAM NAME",
            "",
            "aws kinesis list-shards --stream-name \\",
            "    STREAM NAME",
            "",
            "aws kinesis put-record \\",
            "    --stream-name STREAM NAME \\",
            "    --partition-key PARTITION KEY \\",
            "    --data DATA",
            "",
            "aws kinesis get-shard-iterator --query ShardIterator \\",
            "    --shard-iterator-type SHARD ITERATOR TYPE \\",
            "    --stream-name STREAM NAME \\",
            "    --shard-id SHARD ID",
            "",
            "aws kinesis get-records --shard-iterator \\",
            "    SHARD ITERATOR",
            "```"
        ],
        "description": ""
    },
    "AWS Lambda notes": {
        "prefix": "s-lambda",
        "body": [
            "# AWS Lambda",
            "",
            "**NOTES**:",
            "",
            "* use TDD - applies really well",
            "* avoid relative imports - result in `Runtime.ImportModuleError: Unable to import module '...': attempted relative import with no known parent package` somehow",
            "",
            "```bash",
            "aws lambda create-function --function-name FUNCTION NAME \\",
            "    --role AWS ROLE \\",
            "    --runtime python3.8 \\",
            "    --handler project/core.lambda_ \\",
            "    --code S3Bucket=S3 BUCKET,S3Key=S3 KEY",
            "",
            "aws lambda update-function-code --function-name FUNCTION NAME \\",
            "    --s3-bucket S3 BUCKET --s3-key S3 KEY",
            "",
            "aws lambda delete-function --function-name FUNCTION NAME",
            "```"
        ],
        "description": ""
    }
}