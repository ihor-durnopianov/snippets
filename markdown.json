{
    "Python project template (incomplete)": {
        "prefix": "s-init",
        "body": [
            "# Basic structure of the Python project",
            "",
            "",
            "* `dev/`",
            "",
            "* `tests/`",
            "",
            "    * `conftest.py`",
            "",
            "    * `test_{{whatever}}.py`",
            "",
            "* `{{whatever}}.py`",
            "",
            "* `.gitignore`",
            "",
            "    ```bash",
            "    cat << EOF > .gitignore",
            "    # To be ignored by VCS",
            "",
            "",
            "    __pycache__/",
            "    *.egg-info/",
            "    EOF",
            "    ```",
            "",
            "* `.pylintrc`",
            "",
            "* `Makefile`",
            "",
            "    ```bash",
            "    cat << EOF > Makefile",
            "    #",
            "",
            "    SHELL := /bin/bash",
            "",
            "    .ONESHELL:",
            "",
            "    env:",
            "        python -m venv env",
            "        source env/bin/activate",
            "        pip install --upgrade pip",
            "        pip install wheel",
            "        pip install --requirement requirements-dev.txt",
            "        pip install --requirement requirements.txt",
            "        pip install --editable .",
            "",
            "    test: env",
            "        source env/bin/activate",
            "        pytest .",
            "",
            "    lint: env",
            "        source env/bin/activate",
            "        pylint {{whatever}}.py",
            "",
            "    build:",
            "        :",
            "",
            "    clean:",
            "        :",
            "    EOF",
            "    ```",
            "",
            "* `pytest.ini`",
            "",
            "    ```bash",
            "    cat << EOF > pytest.ini",
            "    ;",
            "",
            "",
            "    [pytest]",
            "    addopts = --verbose",
            "    EOF",
            "    ```",
            "",
            "* `README.md`",
            "",
            "* `requirements.txt`",
            "",
            "    ```bash",
            "    cat << EOF > requirements.txt",
            "    #",
            "",
            "",
            "    # Flask==1.1.2",
            "    EOF",
            "    ```",
            "",
            "* requirements-dev.txt",
            "",
            "    ```bash",
            "    cat << EOF > requirements-dev.txt",
            "    #",
            "",
            "",
            "    # ipython",
            "    EOF",
            "    ```",
            "",
            "* `setup.py`"
        ],
        "description": ""
    },
    "Docker notes/cheatsheet": {
        "prefix": "s-docker",
        "body": [
            "# Docker sandbox",
            "",
            "Concepts: image, container, volume, network",
            "",
            "Docker is ... OS-level virtualization to deliver software in packages called containers.",
            "",
            "Containers are isolated from one another and bundle their own software, libraries and configuration files; ....",
            "",
            "Because all of the containers share the services of a single operating system kernel, they use fewer resources than virtual machines.",
            "",
            "## Images",
            "",
            "```bash",
            "docker image ...",
            "```",
            "",
            "### To list",
            "",
            "```bash",
            "d image ls \\",
            "    [--all]",
            "```",
            "",
            "### To create - pull or build",
            "",
            "```bash",
            "d [image] pull NAME[:TAG]",
            "```",
            "",
            "Docker builds images automatically by reading the instructions from a `Dockerfile` - a text file that contains all commands, in order, needed to build a given image.",
            "",
            "```bash",
            "d [image] build PATH TO DOCKERFILE \\",
            "    --tag name:tag",
            "```",
            "",
            "### To remove, prune",
            "",
            "```bash",
            "d image rm NAME:TAG | IMAGE ID",
            "```",
            "",
            "```bash",
            "d image prune [--all] [--force]",
            "```",
            "",
            "## Containers",
            "",
            "### To list",
            "",
            "```bash",
            "d",
            "    container ls | ps \\",
            "    [--all]",
            "```",
            "",
            "### To create a.k.a. run",
            "",
            "```bash",
            "d [container] run \\",
            "    [--interactive --tty] \\",
            "    [--detach] \\",
            "    [--network host] \\",
            "    IMAGE[:TAG] | IMAGE ID [COMMAND NOT QUOTED]",
            "```",
            "",
            "### To stop",
            "",
            "```bash",
            "d [container] stop CONTAINER ID | NAME",
            "```",
            "",
            "### To remove, prune",
            "",
            "```bash",
            "d [container] rm CONTAINER ID | NAME",
            "```",
            "",
            "```bash",
            "d container prune [--force]",
            "```",
            "",
            "### To fetch logs",
            "",
            "```bash",
            "d [container] logs CONTAINER ID | NAME [--follow]",
            "```",
            "",
            "### To run \"a command in a RUNNING container\"",
            "",
            "```bash",
            "d [container] exec CONTAINER ID | NAME \\",
            "    [--interactive --tty]",
            "    [--detach]",
            "    COMMAND NOT QUOTED",
            "```",
            "",
            "### To export container's filesystem",
            "",
            "```bash",
            "d [container] export CONTAINER ID | NAME",
            "    [--output FILE]",
            "```",
            "",
            "## Volumes",
            "",
            "",
            "",
            "## Networks",
            "",
            "### To list",
            "",
            "```bash",
            "d network ls",
            "```",
            "",
            "### To create",
            "",
            "```bash",
            "d network create NETWORK NAME | ID \\",
            "    [--attachable]",
            "```",
            "",
            "### To remove, prune",
            "",
            "```bash",
            "d network rm NETWORK NAME | ID",
            "```",
            "",
            "```bash",
            "d network prune [--force]",
            "```",
            "",
            "TO BE CONTINUED..."
        ],
        "description": ""
    },
    "Kinesis basics": {
        "prefix": "s-kinesis",
        "body": [
            "# Kinesis",
            "",
            "## Data Streams",
            "",
            "Concepts: record, stream, shard, producer, consumer",
            "",
            "```bash",
            "npm install kinesis-console-consumer",
            "```",
            "",
            "```bash",
            "export AWS_REGION=\"us-west-2\" && \\",
            "    node_modules/.bin/kinesis-console-consumer --list",
            "",
            "export AWS_REGION=\"us-west-2\" && \\",
            "    node_modules/.bin/kinesis-console-consumer --type-oldest STREAM NAME",
            "```",
            "",
            "```bash",
            "aws kinesis list-streams",
            "",
            "aws kinesis create-stream --stream-name STREAM NAME --shard-count SHARD COUNT",
            "",
            "aws kinesis describe-stream --stream-name STREAM NAME",
            "",
            "aws kinesis describe-stream-summary --stream-name \\",
            "    STREAM NAME",
            "",
            "aws kinesis list-shards --stream-name \\",
            "    STREAM NAME",
            "",
            "aws kinesis put-record \\",
            "    --stream-name STREAM NAME \\",
            "    --partition-key PARTITION KEY \\",
            "    --data DATA",
            "",
            "aws kinesis put-record --stream-name STREAM NAME --partition-key PARTITION KEY --data $(python -c 'import base64, json; print(base64.encodebytes(json.dumps({",
            "    \"id\": 0",
            "}).encode(\"utf-8\")).decode(\"utf-8\").strip(), end=\"\")')",
            "",
            "aws kinesis get-shard-iterator --query ShardIterator \\",
            "    --shard-iterator-type SHARD ITERATOR TYPE \\",
            "    --stream-name STREAM NAME \\",
            "    --shard-id SHARD ID",
            "",
            "aws kinesis get-records --shard-iterator \\",
            "    SHARD ITERATOR",
            "",
            "aws kinesis delete-stream --stream-name STREAM NAME",
            "```",
            "",
            "## Firehose",
            "",
            "Concepts: record, destination",
            "",
            "```bash",
            "",
            "aws firehose list-delivery-streams",
            "",
            "aws firehose describe-delivery-stream --delivery-stream-name delivery-stream",
            "",
            "# 4 DirectPut",
            "python -c 'import boto3, json; client = boto3.client(\"firehose\"); print(client.put_record(",
            "    DeliveryStreamName=\"delivery-stream\",",
            "    Record={\"Data\": json.dumps(",
            "        {\"ticker_symbol\": \"QXZ\", \"sector\": \"HEALTHCARE\", \"change\": -0.05, \"price\": 84.51}",
            "    )}",
            "))'",
            "```"
        ],
        "description": ""
    },
    "AWS Lambda notes": {
        "prefix": "s-lambda",
        "body": [
            "# AWS Lambda",
            "",
            "**NOTES**:",
            "",
            "* use TDD - applies really well",
            "* avoid relative imports - result in `Runtime.ImportModuleError: Unable to import module '...': attempted relative import with no known parent package` somehow",
            "",
            "```python",
            "def lambda_(event, _=None):",
            "    return {}",
            "```",
            "",
            "```bash",
            "aws lambda create-function --function-name FUNCTION NAME \\",
            "    --role AWS ROLE \\",
            "    --runtime python3.8 \\",
            "    --handler project/core.lambda_ \\",
            "    --code S3Bucket=S3 BUCKET,S3Key=S3 KEY",
            "",
            "aws lambda update-function-code --function-name FUNCTION NAME \\",
            "    --s3-bucket S3 BUCKET --s3-key S3 KEY",
            "",
            "aws lambda delete-function --function-name FUNCTION NAME",
            "```",
            "",
            "## serverless (a.k.a. sls)",
            "",
            "**NOTE**:",
            "* requires virtual environment",
            "* does NOT recognize `service` and `stage` changes - simply creates a new stack like \"it's never seen it before\"",
            "",
            "```bash",
            "cat << EOF > serverless.yml",
            "# ",
            "# ",
            "# Reference - ",
            "#   https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/",
            "",
            "service: serverless-service-name",
            "# useDotenv: false",
            "# Since \"starting with next major, Serverless will throw on",
            "# configuration errors by default\"...",
            "configValidationMode: warn",
            "",
            "provider:",
            "  name: aws",
            "  stage: dev",
            "  region: us-west-2",
            "  stackName: aws-cloudformation-stack-name",
            "  # Why should I care?!  Because of \"Deprecation warning: Resolution of",
            "  # lambda version hashes was improved with better algorithm, which",
            "  # will be used in next major release.\"",
            "  lambdaHashingVersion: 20201221",
            "  iam:",
            "    role:",
            "      statements:",
            "        - Effect: \"Allow\"",
            "          Action: [",
            "            \"kinesis:GetShardIterator\",",
            "            \"kinesis:GetRecords\",",
            "            \"kinesis:DescribeStream\"          ",
            "          ]",
            "          Resource:",
            "            Fn::Join: [\"\", [",
            "              \"arn:aws:kinesis:region:XXXXXX:stream/foo\"",
            "            ]]",
            "  runtime: python3.8",
            "",
            "functions:",
            "  projectLambda:",
            "    handler: project/core.lambda_",
            "    name: aws-lambda-function-name",
            "    events:",
            "      - stream:",
            "          arn: arn:aws:kinesis:region:XXXXXX:stream/foo",
            "          # # Not yet - https://github.com/serverless/serverless/issues/8815",
            "          # tumblingWindowInSeconds: 900",
            "          startingPosition: LATEST",
            "          batchSize: 100",
            "          enabled: true",
            "",
            "# # Raw CloudFormation resources",
            "# resources:",
            "#   \"Resources\": { ... }",
            "EOF",
            "```",
            "",
            "```bash",
            "# https://www.serverless.com/framework/docs/providers/aws/cli-reference/",
            "sls --help",
            "sls --help-components",
            "",
            "sls create --template aws-python3 --path PATH --name NAME",
            "sls create -t aws-python3 -p PATH -n NAME",
            "",
            "sls print",
            "",
            "sls package",
            "",
            "unzip -l .serverless/*.zip",
            "",
            "sls deploy --verbose --force",
            "",
            "sls info",
            "",
            "sls remove --verbose",
            "",
            "sls plugin list",
            "```"
        ],
        "description": ""
    },
    "pyenv[-virtualenv] cheatsheet": {
        "prefix": "s-pyenv-virtualenv",
        "body": [
            "# pyenv-virtualenv",
            "",
            "Like `venv`, but better",
            "",
            "```bash",
            "pyenv virtualenv 3.8.6 zappa-init",
            "",
            "pyenv virtualenvs",
            "",
            "ls ~/.pyenv/versions/3.8.6/envs/",
            "",
            "pyenv uninstall zappa-init",
            "",
            "pyenv local zappa-init",
            "",
            "pyenv local",
            "",
            "pyenv local --unset",
            "```"
        ],
        "description": ""
    },
    "K8s dump": {
        "prefix": "s-k8s-dump",
        "body": [
            "# K8s dump",
            "",
            "```bash",
            "k logs --selector KEY=VALUE --container CONTAINER NAME --follow --max-log-requests 6",
            "k logs -l KEY=VALUE -c CONTAINER NAME -f --max-log-requests 6",
            "",
            "k rollout restart deployment DEPLOYMENT NAME",
            "",
            "k rollout restart daemonset DAEMONSET NAME",
            "",
            "watch -n 1 kubectl get pods --sort-by .metadata.creationTimestamp",
            "",
            "k config view --minify | grep namespace:",
            "",
            "k config set-context --current --namespace=NAMESPACE",
            "",
            "k port-forward service SERVICE NAME 8088:8080",
            "",
            "k wait --for=condition=released helmrelease RELEASE NAME",
            "```",
            "",
            "```bash",
            "helm fetch timberio/vector-agent --untar \\",
            "    --destination .",
            "",
            "helm show values timberio/vector-agent",
            "",
            "helm list --help",
            "",
            "helm install --help",
            "",
            "helm repo --help",
            "",
            "helm dep --help",
            "",
            "helm create --help",
            "",
            "helm package --help",
            "```"
        ],
        "description": ""
    },
    "AWS Athena notes": {
        "prefix": "s-athena",
        "body": [
            "# AWS Athena notes",
            "",
            "```sql",
            "create external table ...",
            "",
            "show create table `DATABASE.TABLE`",
            "",
            "alter table `DATABASE.TABLE` add partition",
            "  (KEY = 'VALUE', ...)",
            "  location 's3://PATH'",
            "",
            "show partitions `DATABASE.TABLE`",
            "",
            "describe formatted `DATABASE.TABLE`",
            "    partition (year=2021, month=07, day=27)",
            "",
            "drop table `DATABASE.TABLE`",
            "```"
        ],
        "description": ""
    },
    "SQL stuff": {
        "prefix": "s-sql",
        "body": [
            "# SQL stuff",
            "",
            "```sql",
            "-- Replace \"john\" and \"secret\"",
            "create user john with encrypted password 'secret';",
            "create user john with password 'secret'; -- 4 Redshift",
            "create database john;",
            "grant all privileges on database john to john;",
            "drop user john;",
            "",
            "-- GRANT/REVOKE cheatsheet",
            "-- See https://www.postgresql.org/docs/current/sql-grant.html for more",
            "grant connect on database john to john;",
            "-- revoke connect on database john from john;",
            "grant usage on schema public to john;",
            "-- revoke usage on schema public from john;",
            "grant select on all tables in schema public to john;",
            "-- revoke select on all tables in schema public from john;",
            "grant select on relation to john;",
            "-- grant select(id, name) on relation to john;",
            "-- revoke select on relation from john;",
            "",
            "-- \"list table, view, and sequence access privileges\"",
            "\\dp relation",
            "",
            "-- Make \"grant select\" on individual columns",
            "with args as (",
            "    select",
            "        'public' as table_schema",
            "        , 'relation' as table_name",
            "        , 'john' as user_name",
            ")",
            "select",
            "    'grant select('",
            "    || array_to_string(array_agg(column_name), ', ')",
            "    || ') on '",
            "    || (select table_name from args)",
            "    || ' to '",
            "    || (select user_name from args)",
            "    || ';'",
            "from information_schema.columns where",
            "    table_schema = (select table_schema from args)",
            "    and table_name = (select table_name from args)",
            "    -- and column_name in ('id', 'name')",
            "    and column_name not in ('secret')",
            ";",
            "",
            "-- List users",
            "\\du",
            "\\d pg_catalog.pg_user",
            "select",
            "    usename",
            "    , usecreatedb",
            "    , usesuper",
            "    -- , userepl",
            "    -- , usebypassrls",
            "    , passwd",
            "    , valuntil",
            "    , useconfig",
            "from pg_catalog.pg_user",
            "where true",
            "    -- and usename = 'john'",
            "order by usename;",
            "",
            "-- Hello, relation",
            "create table relation (",
            "    id int",
            "    , name text",
            ");",
            "select * from relation limit 1;",
            "insert into relation (id, name) values (0, 'a');",
            "delete from relation;",
            "drop table relation;",
            "",
            "alter table relation add column environment text;",
            "select",
            "    -- column_name, data_type, character_maximum_length",
            "    *",
            "from information_schema.columns where table_name ='relation';",
            "```",
            "",
            "## AWS Athena & Co.",
            "",
            "https://docs.aws.amazon.com/athena/latest/ug/extracting-data-from-JSON.html",
            "",
            "https://docs.aws.amazon.com/redshift/latest/dg/r_DATE_TRUNC.html",
            "https://docs.starburst.io/latest/functions/datetime.html",
            "",
            "## Window functions",
            "",
            "https://en.wikipedia.org/wiki/Window_function_(SQL)#Syntax",
            "",
            "```sql",
            "select",
            "    avg(price) over (order by time rows between 89 preceding and current row)",
            "    row_number() over (partition by exchange order by price desc)",
            "    lag(price, 1) over (partition by exchange, symbol order by time)",
            "from relation",
            "```",
            "",
            "## Misc",
            "",
            "```sql",
            "show search_path;",
            "alter user john",
            "    set search_path to '\\$user', 'public';",
            "",
            "select * from pg_catalog.pg_table_def where true",
            "    and schemaname = 'public'",
            "    and tablename = 'relation';",
            "",
            "alter table public.relation alter compound sortkey (timestamp);",
            "alter table public.relation alter sortkey none;",
            "",
            "-- Date/time...",
            "with sample as (",
            "    select",
            "        to_timestamp('2021-09-02 07:31:12', 'YYYY-MM-DD HH24-MI-SS')",
            "        as timestamp",
            ")",
            "select",
            "    timestamp",
            "    , date_trunc('day', timestamp) as date",
            "    , date_part('day', timestamp) as day",
            "from sample;",
            "",
            "-- Values",
            "select * from (values ",
            "    (0, 'Ihor'),",
            "    (1, 'Tanya')",
            ") as _ (id, name);",
            "-- Or",
            "with sample as (",
            "    select 0 as id, 'Ihor' as name",
            "    union all select 1, 'Tanya'",
            ")",
            "select * from sample;",
            "```"
        ],
        "description": ""
    },
    "Stuff that does not seem to fit anywhere else": {
        "prefix": "s-misc",
        "body": [
            "# Misc stuff",
            "",
            "```bash",
            "# Adopted from https://docs.python.org/3/library/secrets.html#recipes-and-best-practices",
            "python -c '",
            "import string, secrets",
            "",
            "print(\"\".join(",
            "    secrets.choice(string.ascii_letters + string.digits) for i in range(8)",
            "))'",
            "```"
        ],
        "description": ""
    }
}