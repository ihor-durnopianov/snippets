{
    "docker-compose example/cheatsheet": {
        "prefix": "s-doco",
        "body": [
            "#",
            "",
            "",
            "version: \"3.3\"",
            "",
            "",
            "services:",
            "",
            "  database:",
            "    image: postgres",
            "    environment:",
            "      POSTGRES_PASSWORD: postgres",
            "      # PGPORT: 5439",
            "    ports:",
            "      - \"5439:5439\"",
            "    volumes:",
            "      # - type: bind",
            "      #   source: ./data",
            "      #   target: /var/lib/postgresql/data",
            "      - type: volume",
            "        source: data",
            "        target: /var/lib/postgresql/data",
            "    container_name: database",
            "    networks:",
            "      - app-network",
            "",
            "  app:",
            "    build: .",
            "    image: amazing:latest",
            "    # command: python -c 'import time, sys; print(\"started\", file=sys.stderr), time.sleep(3), print(\"stopping\", file=sys.stderr)'",
            "    # command: gunicorn --bind 0.0.0.0:80 --workers 4 --log-level debug --access-logfile - --access-logformat \"%(h)s | %(l)s | %(u)s | %(t)s | %(r)s | %(s)s | %(b)s | %(f)s | %(a)s\" \"attributer:create_app()\"",
            "    command: python -c 'from flask import Flask; Flask(__name__).run()'",
            "    # \"... you cannot scale a service beyond 1 container if you have",
            "    # specified a custom name\"",
            "    # i.e. disables --scale SERVICE=NUM",
            "    container_name: simply-container",
            "    # # \"Use the same values as the docker client --network parameter ...\"",
            "    # # \"The host networking driver only works on Linux hosts\"",
            "    # network_mode: host",
            "    ports:",
            "      - \"5001:5001\"",
            "    volumes:",
            "    # # To equate",
            "    # #   docker exec simply-container ls /App",
            "    # #   to ls .",
            "    #   - type: bind",
            "    #     source: .",
            "    #     target: /App",
            "    # To equate",
            "    #   docker exec simply-container ls /App",
            "    #   to ls /var/lib/docker/volumes/docker-sandbox_some-volume/_data",
            "    # instead",
            "      - type: volume",
            "        source: some-volume",
            "        target: /App",
            "    environment:",
            "      # - FLASK_APP=attributer",
            "      # - FLASK_RUN_HOST=0.0.0.0",
            "      - FLASK_RUN_PORT=5001",
            "      # - LC_ALL=C.UTF-8",
            "      # - LANG=C.UTF-8",
            "    networks:",
            "      - app-network",
            "    depends_on:",
            "      - database",
            "",
            "",
            "volumes:",
            "",
            "  data:",
            "    name: data",
            "    # \"A volume may be created directly outside of compose with `docker",
            "    # volume create` and then referenced inside docker-compose.yml\"",
            "    # with external: true",
            "    external: false",
            "",
            "  some-volume:",
            "    name: some-volume",
            "",
            "",
            "networks:",
            "  app-network:",
            "    name: app-network",
            "",
            "",
            "# docker-compose build",
            "#   -> equivalent to docker image build . --tag amazing:latest",
            "",
            "# docker-compose up [--detach]",
            "#   -> equivalent to",
            "#        docker-compose build",
            "#        + docker run [--detach] \\",
            "#            --name simply-container \\",
            "#            amazing:latest {{command}}",
            "#        + network stuff if not network_mode == \"host\""
        ],
        "description": ""
    },
    "helm release": {
        "prefix": "s-release",
        "body": [
            "#",
            "#",
            "# Related:",
            "# RELEASE=$TM_FILEPATH \\",
            "# && NAMESPACE=$(cat \\$RELEASE | yq .metadata.namespace -r) \\",
            "# && CHART_PATH=$(cat \\$RELEASE | yq .spec.chart.path -r) \\",
            "# && RELEASE_NAME=$(cat \\$RELEASE | yq .spec.releaseName -r) \\",
            "# && cat \\$RELEASE | yq -y .spec.values \\",
            "#     | helm upgrade \\$RELEASE_NAME \\$CHART_PATH --namespace \\$NAMESPACE --values - --install --debug --dry-run",
            "#",
            "# cat $TM_FILEPATH | yq",
            "# k apply -f $TM_FILEPATH",
            "# k describe -f $TM_FILEPATH",
            "# k delete -f $TM_FILEPATH",
            "#",
            "# For more info, visit",
            "# https://docs.fluxcd.io/projects/helm-operator/en/stable/references/helmrelease-custom-resource/#helm.fluxcd.io/v1.HelmReleaseSpec",
            "apiVersion: helm.fluxcd.io/v1",
            "kind: HelmRelease",
            "metadata:",
            "  name: superset",
            "  namespace: superset",
            "spec:",
            "  chart:",
            "    git: git@github.com:ihor-durnopianov/superset-helm.git",
            "    path: .",
            "    ref: master",
            "  releaseName: superset",
            "  values:",
            "    image:",
            "      tag: 1.1.0",
            "    service:",
            "      port: 8089",
            ""
        ],
        "description": ""
    },
    "external secret": {
        "prefix": "s-es",
        "body": [
            "#",
            "#",
            "# cat $TM_FILEPATH | yq",
            "# k apply -f $TM_FILEPATH",
            "# k describe -f $TM_FILEPATH",
            "# k delete -f $TM_FILEPATH",
            "apiVersion: kubernetes-client.io/v1",
            "kind: ExternalSecret",
            "metadata:",
            "  name: external-secret-name <-",
            "  namespace: target-namespace <-",
            "secretDescriptor:",
            "  backendType: systemManager",
            "  data:",
            "  - key: /aws/systems/manager/parameter/name <-",
            "    name: just-name <-",
            ""
        ],
        "description": ""
    },
    "NGINX ingress": {
        "prefix": "s-nginx-ing",
        "body": [
            "# NGINX ingress.",
            "#",
            "# Requires NGINX Ingress Controller",
            "# , see https://kubernetes.github.io/ingress-nginx/",
            "# and cert-manager",
            "# , see https://cert-manager.io/docs/usage/ingress/",
            "#",
            "# cat $TM_FILEPATH | yq",
            "# k apply -f $TM_FILEPATH",
            "# k describe -f $TM_FILEPATH",
            "# k delete -f $TM_FILEPATH",
            "#",
            "# k get ingresses && k get secrets && k get certificates && k get certificaterequest && k get orders",
            "# k logs -l app=cert-manager -n cert-manager --follow --tail 32",
            "apiVersion: networking.k8s.io/v1beta1",
            "kind: Ingress",
            "metadata:",
            "  name: nginx-ingress-name <-",
            "  namespace: target-namespace <-",
            "  annotations:",
            "    kubernetes.io/ingress.class: nginx",
            "    cert-manager.io/cluster-issuer: letsencrypt-prod <-",
            "spec:",
            "  rules:",
            "  - host: app.example.com <-",
            "    http:",
            "      paths:",
            "      - path: /",
            "        backend:",
            "          serviceName: service-name <-",
            "          servicePort: 8080 <-",
            "  tls:",
            "  - hosts:",
            "    - app.example.com <-",
            "    secretName: app.example.com <-",
            ""
        ],
        "description": ""
    },
    "ALB ingress": {
        "prefix": "s-alb-ing",
        "body": [
            "# ALB ingress.",
            "#",
            "# Requires ALB Ingress Controller",
            "# , see https://kubernetes-sigs.github.io/aws-load-balancer-controller/",
            "# and ExternalDNS",
            "# , see https://github.com/kubernetes-sigs/external-dns",
            "#",
            "# cat $TM_FILEPATH | yq",
            "# k apply -f $TM_FILEPATH",
            "# k describe -f $TM_FILEPATH",
            "# k delete -f $TM_FILEPATH",
            "#",
            "# k logs -l app.kubernetes.io/name=aws-alb-ingress-controller -n aws-alb-ingress-controller --follow --tail 32",
            "# k logs -l app.kubernetes.io/name=external-dns -n external-dns --follow --tail 32",
            "apiVersion: networking.k8s.io/v1beta1",
            "kind: Ingress",
            "metadata:",
            "  name: alb-ingress-name <-",
            "  namespace: target-namespace <-",
            "  annotations:",
            "    kubernetes.io/ingress.class: alb",
            "    # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v1.1/guide/ingress/annotation/",
            "    alb.ingress.kubernetes.io/target-type: ip",
            "    alb.ingress.kubernetes.io/scheme: internet-facing",
            "    external-dns.alpha.kubernetes.io/hostname: app.example.com <-",
            "    alb.ingress.kubernetes.io/certificate-arn:",
            "      arn:aws:acm:bla-bla-bla <-",
            "    alb.ingress.kubernetes.io/actions.ssl-redirect: >",
            "      {",
            "        \"Type\": \"redirect\",",
            "        \"RedirectConfig\": {",
            "          \"Protocol\": \"HTTPS\", \"Port\": \"443\", \"StatusCode\": \"HTTP_301\"",
            "        }",
            "      }",
            "    alb.ingress.kubernetes.io/listen-ports: >",
            "      [",
            "        {\"HTTP\": 80},",
            "        {\"HTTPS\": 443}",
            "      ]",
            "spec:",
            "  rules:",
            "  - host: app.example.com <-",
            "    http:",
            "      paths:",
            "      - path: /*",
            "        backend:",
            "          serviceName: ssl-redirect",
            "          servicePort: use-annotation",
            "      - path: /*",
            "        backend:",
            "          serviceName: service-name <-",
            "          servicePort: 8080 <-",
            ""
        ],
        "description": ""
    },
    "annotations to secure ALB ingress with Cognito": {
        "prefix": "s-congito",
        "body": [
            "metadata:",
            "  annotations:",
            "    alb.ingress.kubernetes.io/auth-type: cognito",
            "    alb.ingress.kubernetes.io/auth-idp-cognito: >",
            "      {",
            "        \"UserPoolArn\": \"arn:aws:cognito-idp:bla-bla-bla\", <-",
            "        \"UserPoolClientId\":\"26 random numbers and lowercase letters\", <-",
            "        \"UserPoolDomain\":\"user-pool-domain\" <-",
            "      }",
            "    alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate",
            "    alb.ingress.kubernetes.io/auth-session-cookie: AWSELBAuthSessionCookie # Is that needed?",
            "    alb.ingress.kubernetes.io/auth-session-timeout: '14400' # 4 hours",
            ""
        ],
        "description": ""
    }
}
